"""
Image processing routes for the Book Logistics API.
"""
import os
import uuid
from datetime import datetime
from flask import Blueprint, request, jsonify, current_app
from flask_jwt_extended import jwt_required, get_jwt_identity
from werkzeug.utils import secure_filename
from PIL import Image
from app import db
from app.modules.inventory.models import Book

image_bp = Blueprint('image', __name__, url_prefix='/api/images')

# Configure upload folder
UPLOAD_FOLDER = 'app/static/uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}

def allowed_file(filename):
    """Check if the file extension is allowed."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def ensure_upload_folder():
    """Ensure the upload folder exists."""
    os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@image_bp.route('/upload', methods=['POST'])
@jwt_required()
def upload_image():
    """Upload a book image and process it."""
    # Check if the post request has the file part
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['file']
    
    # Check if the file is empty
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    # Check if the file is allowed
    if not allowed_file(file.filename):
        return jsonify({'error': f'File type not allowed. Allowed types: {", ".join(ALLOWED_EXTENSIONS)}'}), 400
    
    # Ensure upload folder exists
    ensure_upload_folder()
    
    # Generate a unique filename
    filename = secure_filename(file.filename)
    unique_filename = f"{uuid.uuid4()}_{filename}"
    file_path = os.path.join(UPLOAD_FOLDER, unique_filename)
    
    # Save the file
    file.save(file_path)
    
    # Process the image (in a real app, this would call an AI service)
    book_info = process_book_image(file_path)
    
    return jsonify({
        'message': 'Image uploaded and processed successfully',
        'file_path': file_path,
        'book_info': book_info
    }), 201

def process_book_image(image_path):
    """
    Process a book image to extract information.
    
    In a real application, this would call an AI service to analyze the image.
    For this example, we'll simulate the AI response with mock data.
    """
    # Simulate AI processing delay and response
    # In a real app, this would call an external AI service API
    
    # Mock data - in a real app, this would come from the AI service
    book_info = {
        'title': 'Sample Book Title',
        'author': 'Sample Author',
        'genre': 'Fiction',
        'description': 'This is a sample book description that would be generated by the AI service.',
        'suggested_storage_section': 'Fiction-A3',
        'confidence_score': 0.85
    }
    
    return book_info

@image_bp.route('/analyze', methods=['POST'])
@jwt_required()
def analyze_and_create_book():
    """Analyze a book image and create a book entry."""
    # Check if the post request has the file part
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    
    file = request.files['file']
    
    # Check if the file is empty
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    
    # Check if the file is allowed
    if not allowed_file(file.filename):
        return jsonify({'error': f'File type not allowed. Allowed types: {", ".join(ALLOWED_EXTENSIONS)}'}), 400
    
    # Ensure upload folder exists
    ensure_upload_folder()
    
    # Generate a unique filename
    filename = secure_filename(file.filename)
    unique_filename = f"{uuid.uuid4()}_{filename}"
    file_path = os.path.join(UPLOAD_FOLDER, unique_filename)
    
    # Save the file
    file.save(file_path)
    
    # Process the image (in a real app, this would call an AI service)
    book_info = process_book_image(file_path)
    
    # Create a new book with the extracted information
    user_id = get_jwt_identity()
    
    # Allow manual overrides from form data
    form_data = request.form.to_dict()
    
    book = Book(
        title=form_data.get('title', book_info['title']),
        author=form_data.get('author', book_info['author']),
        genre=form_data.get('genre', book_info['genre']),
        description=form_data.get('description', book_info['description']),
        storage_section=form_data.get('storage_section', book_info['suggested_storage_section']),
        image_path=file_path
    )
    
    db.session.add(book)
    db.session.commit()
    
    return jsonify({
        'message': 'Book created from image analysis',
        'book': book.to_dict(),
        'ai_analysis': book_info
    }), 201 